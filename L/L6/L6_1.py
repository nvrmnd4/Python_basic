# : str - Это аннотация, необязательно, но полезно
# сигнатура функции - это её имя и параметры (порядок и имена параметров)
def say_hi(name: str):
    print(f'Hi, {name}')


def say_hi_cap(name: str):
    name_cap = name.capitalize()
    print(f'Hi, {name_cap}')
    print(x)
    say_hi(name)


# синтаксис
# def *function_name*(*param1*, *param2*, ...):
#   тело функции с отступом. Закончился отступ - функция закончилась
def say_hi_to_names(names: list):
    for name in names:
        print(f'Hi, {name}')


def say_hi_to_many(*name: str):
    for _name in name:
        print(f'Hi, {_name}')


x = 3
say_hi_cap('kyrylo')
say_hi('Wiktor')
say_hi('Valentin')
say_hi('Pavel')
say_hi('Olga')
say_hi('Yelisey')
# как видим, функция не думает, а просто выполняет :)
say_hi('asdasdzxczbcnjadtyfdh')
# annotation : str - больше для программистов чем для пайтона. Можно передавать другие типы данных и ошибки не будет
say_hi(542134)
say_hi(False)
# однако на функции say_hi_cap эти данные срежутся - потому как там используется метод чисто для строк.
# Программист, пишущий фукнции и аннотации к ним по типу данных *рекомендует* нужный тип

say_hi(['Valentin', 'Pavel'])  # ошибка, потому что ожидается только 1 элемент
say_hi_to_names(['Valentin', 'Pavel'])  # ожидается список, поэтому всё ок


# Снаружи функции мы не имеем доступа к переменным, объявленным внутри функций.
# Все функции подчищают за собой после окончания. Это очень выгодно - можно загружать тяжелые объемные процессы
# в функции и быть уверенным что там не будет потерь памяти
# print(name_cap)  # вызывает ошибку

# находясь внутри функции, можно ЧИТАТЬ переменные из общей области видимости
# чтобы МЕНЯТЬ изнутри функции переменные объявленные в общей области видимости, нужно использова конструкцию
# global *variable_name*
# после чего можно её менять
# без этой конструкции лучше ИЗБЕГАТь использования тех же имён переменных изнутри и снаружи функций
# параллельно существующему пространству имен (общему) появляется дополнительное внутри функции (на время её выполнения)

say_hi_to_many('kyrylo', 'Wiktor', 'Valentin', 'Pavel', 'Olga', 'Yelisey')